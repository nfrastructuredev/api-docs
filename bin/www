#!/usr/bin/env node

/**
 * Module dependencies.
 */

const https = require('https');
const fs = require('fs');
const app = require('../src/app');

const normalizePort = (val) => {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
};

const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            process.exit(1);
            break;
        case 'EADDRINUSE':
            process.exit(1);
            break;
        default:
            throw error;
    }
};

const onListening = () => {};

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/**
 * Create HTTP server.
 */
const key = fs.readFileSync(__dirname + '/../data/certs/key.key');
const cert = fs.readFileSync(__dirname + '/../data/certs/cert.crt');
const options = {
    key: key,
    cert: cert,
};
const server = https.createServer(options, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
